// Decompiled with JetBrains decompiler
// Type: Microsoft.WindowsPhone.ImageDesigner.Core.ViewModels.SelectTemplatesPageVM
// Assembly: ImageDesignerCore, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b3f029d4c9c2ec30
// MVID: A00BBFA4-FB4D-4867-990A-673A22716507
// Assembly location: C:\Users\Admin\Desktop\ImageDesigner\64\ImageDesigner\ImageDesignerCore.dll

using Microsoft.WindowsPhone.ImageUpdate.Customization.XML;
using Microsoft.WindowsPhone.ImageUpdate.PkgCommon;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Windows;

namespace Microsoft.WindowsPhone.ImageDesigner.Core.ViewModels
{
  public class SelectTemplatesPageVM : IDViewModelBase
  {
    public static readonly string BaseOEMCustomizationFilename = "OEMCustomization.xml";
    private static readonly string _akRelativeTemplatesPath = "OEMCustomizationTemplates";
    private ImageCustomizations _curOEMCustomization;
    public static readonly DependencyProperty FromListProperty = DependencyProperty.Register(nameof (FromList), typeof (ObservableNotifyObjectCollection<WPCustomization>), typeof (SelectTemplatesPageVM), new PropertyMetadata((PropertyChangedCallback) null));
    public static readonly DependencyProperty ToListProperty = DependencyProperty.Register(nameof (ToList), typeof (ObservableNotifyObjectCollection<WPCustomization>), typeof (SelectTemplatesPageVM), new PropertyMetadata((PropertyChangedCallback) null));

    internal SelectTemplatesPageVM(IDStates mystate)
      : base(mystate)
    {
    }

    protected override bool SaveSupported => true;

    protected override void Validate()
    {
      if (this.ToList == null || this.ToList.Count<WPCustomization>() == 0)
        this.IsValid = false;
      else
        this.IsValid = true;
    }

    protected override void ComputeNextState() => this._nextState = new IDStates?(IDStates.CustomizeOS);

    internal override bool OnStateEntry()
    {
      this.PopulateCustomizations();
      this.Validate();
      return true;
    }

    protected override bool SavePage()
    {
      if (this.ToList == null || this.ToList.Count<WPCustomization>() == 0)
        return false;
      ImageCustomizations imageCustomizations = this.MergeTemplates();
      this._curOEMCustomization = imageCustomizations;
      if (File.Exists(this.CurrentOEMCustomizationFile))
        File.Delete(this.CurrentOEMCustomizationFile);
      imageCustomizations.Save(this.CurrentOEMCustomizationFile);
      return true;
    }

    public string GetTempMergedTemplateFile()
    {
      ImageCustomizations imageCustomizations = this.MergeTemplates();
      string mergedTemplateFile = Path.Combine(this.Context.TemporaryDirectory, "MergedTemplates.xml");
      imageCustomizations.Save(mergedTemplateFile);
      return mergedTemplateFile;
    }

    private ImageCustomizations MergeTemplates()
    {
      ImageCustomizations imageCustomizations = new ImageCustomizations();
      bool flag = true;
      for (int index = this.ToList.Count<WPCustomization>() - 1; index >= 0; --index)
        imageCustomizations.Merge(this.ToList[index].Customization, flag);
      imageCustomizations.Description = "Customization generated by merging templates in Image Designer";
      imageCustomizations.Name = "Custom";
      imageCustomizations.Owner = "OEM";
      imageCustomizations.OwnerType = (OwnerType) 2;
      return imageCustomizations;
    }

    public string AKCustomizationTemplatesDir => Path.Combine(this.Context.AKRoot, SelectTemplatesPageVM._akRelativeTemplatesPath);

    public ImageCustomizations CurrentOEMCustomization
    {
      get
      {
        if (this._curOEMCustomization == null && File.Exists(this.CurrentOEMCustomizationFile))
          this._curOEMCustomization = ImageCustomizations.LoadFromPath(this.CurrentOEMCustomizationFile);
        return this._curOEMCustomization;
      }
      set => this._curOEMCustomization = value;
    }

    public string CurrentOEMCustomizationFile => Path.Combine(this.Context.OutputDir, SelectTemplatesPageVM.BaseOEMCustomizationFilename);

    private void PopulateCustomizations()
    {
      ObservableCollection<WPCustomization> list1 = new ObservableCollection<WPCustomization>();
      List<string> stringList = new List<string>();
      if (Directory.Exists(this.Context.BSPConfig.OEMCustomizationTemplateDir))
        stringList.AddRange((IEnumerable<string>) ((IEnumerable<string>) Directory.GetFiles(this.Context.BSPConfig.OEMCustomizationTemplateDir, "*.xml")).ToList<string>());
      if (Directory.Exists(this.AKCustomizationTemplatesDir))
        stringList.AddRange((IEnumerable<string>) ((IEnumerable<string>) Directory.GetFiles(this.AKCustomizationTemplatesDir, "*.xml")).ToList<string>());
      foreach (string File in stringList)
      {
        ImageCustomizations customization;
        try
        {
          customization = ImageCustomizations.LoadFromPath(File);
        }
        catch (Exception ex)
        {
          continue;
        }
        list1.Add(new WPCustomization(File, customization));
      }
      this.FromList = new ObservableNotifyObjectCollection<WPCustomization>(new string[2]
      {
        "IsSelected",
        "DisplayText"
      });
      this.FromList.AddItems((IEnumerable<WPCustomization>) list1);
      ObservableCollection<WPCustomization> list2 = new ObservableCollection<WPCustomization>();
      if (File.Exists(this.CurrentOEMCustomizationFile))
      {
        try
        {
          this._curOEMCustomization = ImageCustomizations.LoadFromPath(this.CurrentOEMCustomizationFile);
          list2.Add(new WPCustomization(this.CurrentOEMCustomizationFile, this._curOEMCustomization));
        }
        catch (Exception ex)
        {
          int num = (int) MessageBox.Show(string.Format("The 'Custom' image customization file in your output directory failed to load with the following error: {0}", (object) ex.ToString()), "Failed to Load Image Customization");
        }
      }
      this.ToList = new ObservableNotifyObjectCollection<WPCustomization>(new string[2]
      {
        "IsSelected",
        "DisplayText"
      });
      this.ToList.AddItems((IEnumerable<WPCustomization>) list2);
    }

    public void MoveUp() => this.ToList.MoveBy<WPCustomization>(-1, (Func<WPCustomization, bool>) (x => x.IsSelected));

    public void MoveDown() => this.ToList.MoveBy<WPCustomization>(1, (Func<WPCustomization, bool>) (x => x.IsSelected));

    public void DoAdd()
    {
      this.FromList.MoveTo<WPCustomization>((ObservableCollection<WPCustomization>) this.ToList, (Func<WPCustomization, bool>) (x => x.IsSelected));
      this.Validate();
    }

    public void DoRemove()
    {
      this.ToList.MoveTo<WPCustomization>((ObservableCollection<WPCustomization>) this.FromList, (Func<WPCustomization, bool>) (x => x.IsSelected));
      this.Validate();
    }

    public ObservableNotifyObjectCollection<WPCustomization> FromList
    {
      get => (ObservableNotifyObjectCollection<WPCustomization>) this.GetValue(SelectTemplatesPageVM.FromListProperty);
      set => this.SetValue(SelectTemplatesPageVM.FromListProperty, (object) value);
    }

    public ObservableNotifyObjectCollection<WPCustomization> ToList
    {
      get => (ObservableNotifyObjectCollection<WPCustomization>) this.GetValue(SelectTemplatesPageVM.ToListProperty);
      set => this.SetValue(SelectTemplatesPageVM.ToListProperty, (object) value);
    }
  }
}
