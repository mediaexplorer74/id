<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="UnableToValidateSourceUnknownSettingsPath" xml:space="preserve">
    <value>无法验证源扩展，因为在图像的策略中找不到设置路径“{0}”。</value>
  </data>
  <data name="UnknownConditionName" xml:space="preserve">
    <value>目标“{0}”中包含名为“{1}”的未知条件。无法确定此条件是否有效。</value>
  </data>
  <data name="DuplicateTargets" xml:space="preserve">
    <value>在多个位置中都定义了目标“{0}”。</value>
  </data>
  <data name="PathInvalidPercent" xml:space="preserve">
    <value>Windows 环境变量必须采用 $(this) 格式来声明; %this% 不受支持。</value>
  </data>
  <data name="MismatchedTargets" xml:space="preserve">
    <value>尝试了将两个变量({0}、{1})与不同组的目标引用合并。</value>
  </data>
  <data name="EmptySettingsGroups" xml:space="preserve">
    <value>变量“{0}”设置组列表为空。设置组将被忽略。</value>
  </data>
  <data name="UnableToValidateSettingValueUnknownSettingsPath" xml:space="preserve">
    <value>无法验证值，因为在图像的策略中找不到设置路径“{0}”。</value>
  </data>
  <data name="txtApplicationProvXML" xml:space="preserve">
    <value>应用程序 ProvXML</value>
  </data>
  <data name="CurrentFileMacro" xml:space="preserve">
    <value>CurrentFileDir</value>
  </data>
  <data name="DuplicateSettings" xml:space="preserve">
    <value>路径“{1}”下的设置“{0}”有多个定义。</value>
  </data>
  <data name="DuplicateSettingGroups" xml:space="preserve">
    <value>变量“{0}”中包含的设置路径“{1}”有多个定义。</value>
  </data>
  <data name="InvalidConditionName" xml:space="preserve">
    <value>目标“{0}”中包含名为“{1}”的无效条件。</value>
  </data>
  <data name="PathFileDoesNotExist" xml:space="preserve">
    <value>在磁盘上找不到 {0} 文件路径“{1}”。</value>
  </data>
  <data name="EmptyDataAssetGroups" xml:space="preserve">
    <value>数据资产组列表为空。数据资产组将被忽略。</value>
  </data>
  <data name="UnableToValidateSettingAssetsUnknownSettingsPath" xml:space="preserve">
    <value>无法验证资产，因为在图像的策略中找不到设置路径“{0}”。</value>
  </data>
  <data name="UnableToValidateSourceUnknownSettingName" xml:space="preserve">
    <value>无法验证源扩展，因为路径“{0}”下的设置“{1}”不存在。</value>
  </data>
  <data name="UnableToValidateAssetTypeUnknownSettingsPath" xml:space="preserve">
    <value>无法验证移动运营商资产，因为在图像的策略中找不到设置路径“{0}”。</value>
  </data>
  <data name="PathEmptySource" xml:space="preserve">
    <value>{0} 路径为空。</value>
  </data>
  <data name="EmptyApplicationGroup" xml:space="preserve">
    <value>应用程序组列表为空。应用程序组将被忽略。</value>
  </data>
  <data name="DuplicateAssets" xml:space="preserve">
    <value>路径“{1}”下的资产“{0}”有多个定义。</value>
  </data>
  <data name="EmptyTargetRefs" xml:space="preserve">
    <value>变量“{0}”TargetRefs 列表为空。变量必须至少包含一个有效的 TargetRef。</value>
  </data>
  <data name="SettingDoesNotSupportOperatorAssets" xml:space="preserve">
    <value>路径“{0}”下的设置“{1}”不支持移动运营商资产。</value>
  </data>
  <data name="VariantedImageTimeOnlySettingsGroup" xml:space="preserve">
    <value>设置路径“{0}”为 ImageTimeOnly，不能在非静态变量中使用。</value>
  </data>
  <data name="PathDoesNotExist" xml:space="preserve">
    <value>在磁盘上找不到 {0} 文件或目录路径“{1}”。</value>
  </data>
  <data name="EmptyApplications" xml:space="preserve">
    <value>应用程序列表为空。应用程序将被忽略。</value>
  </data>
  <data name="txtApplicationSource" xml:space="preserve">
    <value>应用程序源</value>
  </data>
  <data name="txtAssetSource" xml:space="preserve">
    <value>资源源</value>
  </data>
  <data name="UnknownSettingName" xml:space="preserve">
    <value>路径“{0}”下的设置“{1}”不存在。</value>
  </data>
  <data name="UnableToValidateDestinationUnknownSettingName" xml:space="preserve">
    <value>无法验证目标扩展，因为路径“{0}”下的设置“{1}”不存在。</value>
  </data>
  <data name="DuplicateConditionUIName" xml:space="preserve">
    <value>条件 UIName '{0}' 在以下目标中具有多个定义：“{1}”。</value>
  </data>
  <data name="InvalidConditionValue" xml:space="preserve">
    <value>路径“{0}”下的条件“{1}”有一个无效值:“{2}”。{3}</value>
  </data>
  <data name="AtomicSettingMissing" xml:space="preserve">
    <value>原子设置组“{0}”缺少设置“{1}”。如果使用设置并且该设置引用标记为“原子”的设置组策略，则必须包括由该策略定义的所有设置。</value>
  </data>
  <data name="UnsupportedFileType" xml:space="preserve">
    <value>路径“{0}”下的设置资产组“{1}”不支持文件类型为“{2}”的资产。请改用“{3}”。</value>
  </data>
  <data name="UnableToValidateSettingNameUnknownSettingsPath" xml:space="preserve">
    <value>无法验证名称，因为在图像的策略中找不到设置路径“{0}”。</value>
  </data>
  <data name="UnableToValidateAssetTypeUnknownSettingName" xml:space="preserve">
    <value>无法验证移动运营商资产，因为路径“{0}”下的设置“{1}”不存在。</value>
  </data>
  <data name="UnknownSettingsPath" xml:space="preserve">
    <value>在图像的策略中找不到设置路径“{0}”。这可能是由于为图像选择的功能与所选的自定义设置不匹配所致。</value>
  </data>
  <data name="CurrentFileDirOverride" xml:space="preserve">
    <value>您的环境变量“{0}”将被替代。</value>
  </data>
  <data name="AssetWithDuplicateFileName" xml:space="preserve">
    <value>路径“{1}”下有多个具有文件名“{0}”的资产</value>
  </data>
  <data name="AssetInvalidTargetFileName" xml:space="preserve">
    <value>路径“{1}”下声明的资产类型“{0}”在属性 "TargetFileName" 属性“{2}”中包含无效字符</value>
  </data>
  <data name="txtApplicationLicense" xml:space="preserve">
    <value>应用程序许可证</value>
  </data>
  <data name="InvalidSettingValue" xml:space="preserve">
    <value>路径“{0}”下的设置“{1}”有一个无效值: {2}。</value>
  </data>
  <data name="SettingPartitionInvalid" xml:space="preserve">
    <value>路径“{0}”下的设置“{1}”由使用无效分区“{2}”的策略设置定义; 必须设置为 {3} 之一。</value>
  </data>
  <data name="PathUnresolvedVariable" xml:space="preserve">
    <value>{0} 路径“{1}”有错误: {2}。</value>
  </data>
  <data name="EmptyTargetState" xml:space="preserve">
    <value>TargetState 为空，将被忽略。</value>
  </data>
  <data name="UnableToValidateSettingValueUnknownSettingName" xml:space="preserve">
    <value>无法验证值，因为路径“{0}”下的设置“{1}”不存在。</value>
  </data>
  <data name="EmptySettingsGroup" xml:space="preserve">
    <value>设置组列表为空。设置组将被忽略。</value>
  </data>
  <data name="AssetsNotSupported" xml:space="preserve">
    <value>图像策略不支持路径“{0}”下的资产。</value>
  </data>
  <data name="EmptyDataAssetsGroup" xml:space="preserve">
    <value>数据资产列表为空。数据资产将被忽略。</value>
  </data>
  <data name="AssetNotFound" xml:space="preserve">
    <value>路径“{1}”下未声明文件名为“{0}”的资产</value>
  </data>
  <data name="AssetWithDuplicateDisplayName" xml:space="preserve">
    <value>路径“{0}”下的设置组有两个使用相同显示名称“{1}”的资产。</value>
  </data>
  <data name="EmptyTargetStates" xml:space="preserve">
    <value>TargetState 未指定，将被忽略</value>
  </data>
  <data name="UnknownTarget" xml:space="preserve">
    <value>引用的目标“{0}”未知。请确保它已定义。</value>
  </data>
  <data name="AssetTargetConflict" xml:space="preserve">
    <value>资产目标“{0}”有两个源:“{1}”和“{2}”。</value>
  </data>
  <data name="PathNotAbsolute" xml:space="preserve">
    <value>{0} 路径“{1}”未解析为绝对路径。</value>
  </data>
  <data name="PathFileNameContainsVars" xml:space="preserve">
    <value>{0} 路径“{1}”不能在文件名中包含环境变量。</value>
  </data>
  <data name="DuplicateApplications" xml:space="preserve">
    <value>多个应用程序条目都在以相同方式使用同一个源文件“{0}”。</value>
  </data>
  <data name="DuplicateDataAssets" xml:space="preserve">
    <value>多个 DataAsset 条目都在以相同方式使用同一个源文件“{0}”。</value>
  </data>
  <data name="UnableToValidateAssetFieldUnknownAssetName" xml:space="preserve">
    <value>无法针对设置路径“{2}”下的资产“{1}”验证“{0}”，因为在图像的策略中找不到资产名称“{3}”。</value>
  </data>
  <data name="AssetNotSupported" xml:space="preserve">
    <value>图像策略不支持路径“{1}”下声明的资产类型“{0}”</value>
  </data>
  <data name="UnableToValidateSettingAssetsUnknownSettingName" xml:space="preserve">
    <value>无法验证资产，因为路径“{0}”下的设置“{1}”不存在。</value>
  </data>
  <data name="EmptyTargets" xml:space="preserve">
    <value>目标列表为空，将被忽略。</value>
  </data>
  <data name="UnableToValidateAssetFieldUnknownSettingsPath" xml:space="preserve">
    <value>无法针对资产“{1}”验证“{0}”，因为在图像的策略中找不到路径“{2}”。</value>
  </data>
  <data name="ApplicationPartitionInvalid" xml:space="preserve">
    <value>应用程序“{0}”使用无效的 TargetPartition“{1}”; 必须设置为 {2} 之一。</value>
  </data>
  <data name="UnableToValidateDestinationUnknownSettingsPath" xml:space="preserve">
    <value>无法验证目标扩展，因为在图像的策略中找不到设置路径“{0}”。</value>
  </data>
  <data name="txtDataAssetSource" xml:space="preserve">
    <value>数据资源源</value>
  </data>
  <data name="NullSettingValue" xml:space="preserve">
    <value>路径“{0}”下的设置“{1}”需要一个值</value>
  </data>
</root>